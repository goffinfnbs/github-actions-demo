name: CI

on:
#  push:
#    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      WD_INPUT1:
        description: 'Test workflow_dispath input 1'
        required: true
        default: 'I am a REQURED workflow_dispatch input and this is my DEFAULT value'
      WD_INPUT2:
        description: 'Test workflow_dispath input 2'
        required: false
      RUNNER_TYPE:
        description: 'value for the runs-on arg'
        required: true
        default: 'self-hosted'
        type: choice
        options:
        - 'self-hosted'
        - 'ubuntu-latest'
jobs:
  hello-world:
    runs-on: ["${{ github.event.inputs.RUNNER_TYPE }}"]
    #runs-on: [self-hosted]
    #runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3

      - name: Output WD_INPUT1
        run: |
          echo "WD_INPUT1: ${{ github.event.inputs.WD_INPUT1 }}"

      - name: Output WD_INPUT2
        run: |
          echo "WD_INPUT2:  ${{ github.event.inputs.WD_INPUT2 }}"

      - name: Run a one-line script
        run: echo Hello, world!

      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
  display-variables:
    name: Display Vars
    # You can use configuration variables with the `vars` context for dynamic jobs
    if: ${{ vars.USE_VARIABLES == 'true' }}
    runs-on: "${{ github.event.inputs.RUNNER_TYPE }}"
    environment: ${{ vars.ENVIRONMENT_STAGE }}
    steps:
    - name: Load env vars
      id: dotenv
      uses: falti/dotenv-action@v1.0.4
      with:
        keys-case: upper
        # path: # default is .env
    - name: step1
      id: step1
      run: |
        echo "organization level variable : ${{ vars.ORGANIZATION_VAR }}"
        echo "environment level variable : ${{ vars.ENVIRONMENT_STAGE }}"
        echo "repository level variable : ${{ vars.REPOSITORY_VAR }}"
        echo "overridden variable : ${{ vars.OVERRIDE_VAR }}"
        echo "variable from shell environment : $env_var"
        echo "conditional variable : ${{ vars.USE_VARIABLES }}"
        echo "from_step_name=step1_envvar" >> $GITHUB_ENV
        echo "STEP_OUT_PUT_PARAM=step1_param" >> $GITHUB_OUTPUT
        echo "GH_OWNER : ${{ steps.dotenv.outputs.GH_OWNER }}"
        echo "GH_REPO : ${{ steps.dotenv.outputs.GH_REPO }}"

    - name: step2
      run: |
        echo "Who passed me an env var value : ${{ env.from_step_name }}"
        echo "Who passed me a step output var : ${{ steps.step1.outputs.STEP_OUT_PUT_PARAM }}"
        echo "EMPEMERAL : ${{ steps.dotenv.outputs.EMPEMERAL }}"
        echo "DISABLEUPDATE : ${{ steps.dotenv.outputs.DISABLEUPDATE }}"
